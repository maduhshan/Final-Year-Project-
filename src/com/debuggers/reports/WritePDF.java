package com.debuggers.reports;

import java.io.File;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.Iterator;

import com.debuggers.core.CandidateAssignment;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class WritePDF {
	public String GenerateFittestSolutionPDF(Hashtable<String, CandidateAssignment> fittestSol, String algorithm){
		  try
		  {
		   Document document = new Document();
		   DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		         Date date = new Date();
		   String filename = "reports\\BestSolution_" + new SimpleDateFormat("yyyy-MM-dd").format(date) +"Generated by "+algorithm+".pdf";
		   PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filename));
		         document.open();
		         
		         // header
		         PdfPTable summaryHeader = new PdfPTable(1);
		            Phrase summary = new Phrase("Best Solution using "+algorithm, new Font(Font.FontFamily.HELVETICA, 13, Font.BOLD));
		            PdfPCell cellSummaryText = new PdfPCell(summary);
		            cellSummaryText.setVerticalAlignment( Element.ALIGN_CENTER);
		            cellSummaryText.setHorizontalAlignment(Element.ALIGN_CENTER);
		            cellSummaryText.setBorder(0);
		            summaryHeader.addCell(cellSummaryText);
		            
		            Phrase summary1 = new Phrase("Stochastic Search Project Allocation by Debuggers", new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL));
		            PdfPCell cellSummaryText2 = new PdfPCell(summary1);
		            cellSummaryText2.setVerticalAlignment( Element.ALIGN_CENTER);
		            cellSummaryText2.setHorizontalAlignment(Element.ALIGN_CENTER);
		            cellSummaryText2.setBorder(0);
		            summaryHeader.addCell(cellSummaryText2);
		            document.add(summaryHeader);
		            
		            // document detail
		            PdfPTable table1 = new PdfPTable(2); 
		         table1.setWidthPercentage(100);
		         table1.setSpacingBefore(10f);
		         table1.setSpacingAfter(10f);
		         
		         float[] columnWidths = {1f, 1f};
		         
		         table1.setWidths(columnWidths);
		         PdfPCell dateLableCell = new PdfPCell(new Paragraph("Date Generated"));
		         dateLableCell.setBorder(0);
		         dateLableCell.setPaddingLeft(10);
		         dateLableCell.setHorizontalAlignment(Element.ALIGN_LEFT);
		         dateLableCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		         table1.addCell(dateLableCell);
		         
		         

		         PdfPCell dateCell = new PdfPCell(new Paragraph(dateFormat.format(date)));
		         dateCell.setBorder(0);
		         dateCell.setPaddingLeft(10);
		         dateCell.setHorizontalAlignment(Element.ALIGN_LEFT);
		         dateCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		         table1.addCell(dateCell);
		         
		         PdfPCell noStdLableCell = new PdfPCell(new Paragraph("No Of Students"));
		         noStdLableCell.setBorder(0);
		         noStdLableCell.setPaddingLeft(10);
		         noStdLableCell.setHorizontalAlignment(Element.ALIGN_LEFT);
		         noStdLableCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		         table1.addCell(noStdLableCell);
		         
		         PdfPCell nostdCell = new PdfPCell(new Paragraph(String.valueOf(fittestSol.size())));
		         nostdCell.setBorder(0);
		         nostdCell.setPaddingLeft(10);
		         nostdCell.setHorizontalAlignment(Element.ALIGN_LEFT);
		         nostdCell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		         table1.addCell(nostdCell);
		         
		         document.add(table1);
		         
		         // Record list
		         
		         PdfPTable table = new PdfPTable(3); 
		         table.setWidthPercentage(100);
		         table.setSpacingBefore(10f); 
		         table.setSpacingAfter(10f);
		         float[] columnWidthRec = {0.2f, 1f, 1f};
		         table.setWidths(columnWidthRec);
		         
		         PdfPCell col1 = new PdfPCell(new Paragraph(""));
		         col1.setBorderColor(BaseColor.BLACK);
		         col1.setPaddingLeft(10);
		         
		         PdfPCell col2 = new PdfPCell(new Paragraph("Student Name"));
		         col2.setBorderColor(BaseColor.BLACK);
		         col2.setPaddingLeft(10);
		         col2.setHorizontalAlignment(Element.ALIGN_CENTER);
		         col2.setVerticalAlignment(Element.ALIGN_MIDDLE);
		         
		         PdfPCell col3 = new PdfPCell(new Paragraph("Assigned Project"));
		         col3.setBorderColor(BaseColor.BLACK);
		         col3.setPaddingLeft(10);
		         col3.setHorizontalAlignment(Element.ALIGN_CENTER);
		         col3.setVerticalAlignment(Element.ALIGN_MIDDLE);
		         
		         table.addCell(col1);
		         table.addCell(col2);
		         table.addCell(col3);
		         
		         Iterator<String> it = fittestSol.keySet().iterator();
		         int index= 1;
		   while (it.hasNext()) {
		    String studentName = it.next();
		    
		    PdfPCell cell1 = new PdfPCell(new Paragraph(String.valueOf(index)));
		          cell1.setBorderColor(BaseColor.BLACK);
		          cell1.setPaddingLeft(10);
		          cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
		          cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
		    
		    PdfPCell cell2 = new PdfPCell(new Paragraph(studentName));
		          cell2.setBorderColor(BaseColor.BLACK);
		          cell2.setPaddingLeft(10);
		          cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
		          cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
		          
		          PdfPCell cell3 = new PdfPCell(new Paragraph( fittestSol.get(studentName).getAssignedProject()));
		          cell3.setBorderColor(BaseColor.BLACK);
		          cell3.setPaddingLeft(10);
		          cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
		          cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);

		          table.addCell(cell1);
		          table.addCell(cell2);
		          table.addCell(cell3);
		          index++;
		   }
		    document.add(table);
		    
		    document.close();
		    writer.close();
		    return new File(filename).getAbsolutePath();
		  }
		  catch (Exception e)
		     {
		         e.printStackTrace();
		         return "Error Occured!";
		     }
		
		 }
	
}
